{"ast":null,"code":"var _jsxFileName = \"D:\\\\studi\\\\reactapp\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { useSelector } from 'react-redux';\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\nlet socket; //Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [name, setName] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = \"localhost:5000\";\n  const store = useSelector(state => state.user.email);\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    setName(store);\n  }, [ENDPOINT]); //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message, message.name]);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [messages]); //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      setName(store);\n      socket.emit('sendMessage', {\n        message,\n        name\n      }, () => setMessage(''));\n    }\n  }; //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n\n\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Messages, {\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["D:/studi/reactapp/client/src/components/Chat/Chat.jsx"],"names":["React","useState","useEffect","io","useSelector","Messages","Input","socket","Chat","message","setMessage","name","setName","messages","setMessages","ENDPOINT","store","state","user","email","on","emit","off","sendMessage","event","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAGA,IAAIC,MAAJ,C,CAEA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMc,QAAQ,GAAG,gBAAjB;AACA,QAAMC,KAAK,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArB,CAAzB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,GAAGJ,EAAE,CAACY,QAAD,CAAX;AAEAH,IAAAA,OAAO,CAACI,KAAD,CAAP;AACD,GAJQ,EAIN,CAACD,QAAD,CAJM,CAAT,CARiB,CAcjB;AACA;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACa,EAAP,CAAU,SAAV,EAAsBX,OAAD,IAAa;AAChCK,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcJ,OAAd,EAAuBA,OAAO,CAACE,IAA/B,CAAD,CAAX;AACD,KAFD;AAIA,WAAO,MAAM;AACXJ,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AACAd,MAAAA,MAAM,CAACe,GAAP;AACD,KAHD;AAID,GATQ,EASN,CAACT,QAAD,CATM,CAAT,CAhBiB,CA2BjB;AACA;AACA;;AACA,QAAMU,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGhB,OAAH,EAAY;AACVG,MAAAA,OAAO,CAACI,KAAD,CAAP;AACAT,MAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA4B;AAACZ,QAAAA,OAAD;AAAUE,QAAAA;AAAV,OAA5B,EAA8C,MAAMD,UAAU,CAAC,EAAD,CAA9D;AACD;AACF,GAPD,CA9BiB,CAwCjB;;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEJ,OAAhB;AAAyB,IAAA,UAAU,EAAEC,UAArC;AAAiD,IAAA,WAAW,EAAEa,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF,CADF;AAQD,CAjDD;;AAmDA,eAAef,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { useSelector } from 'react-redux';\r\nimport Messages from './Messages/Messages';\r\nimport Input from './Input/Input';\r\n\r\n\r\nlet socket;\r\n\r\n//Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\r\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\r\n\r\nconst Chat = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const ENDPOINT = \"localhost:5000\";\r\n  const store = useSelector(state => state.user.email);\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n\r\n    setName(store)\r\n  }, [ENDPOINT]);\r\n\r\n  //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\r\n  // Принимаем один аргумент message.\r\n  useEffect(() => {\r\n    socket.on('message', (message) => {\r\n      setMessages([...messages, message, message.name]);\r\n    });\r\n\r\n    return () => {\r\n      socket.emit('disconnect');\r\n      socket.off();\r\n    }\r\n  }, [messages])\r\n\r\n  //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\r\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\r\n  //А поле input делаем пустым с помощью setMessage('');\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    if(message) {\r\n      setName(store);\r\n      socket.emit('sendMessage', ({message, name}), () => setMessage(''));\r\n    }\r\n  }\r\n\r\n  \r\n  //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\r\n  return (\r\n    <div className=\"outerContainer\">\r\n      <div className=\"container\">\r\n          <Messages messages={messages}/>\r\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}