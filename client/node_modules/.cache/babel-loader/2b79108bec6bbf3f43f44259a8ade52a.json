{"ast":null,"code":"var _jsxFileName = \"/Users/strong/worck/study/AppReact/reactAppChat/client/src/components/Chat/Chat.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport io from \"socket.io-client\";\nimport * as actions from \"../../store/actions/index\";\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input'; // let socket;\n//Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]); // const ENDPOINT = \"localhost:5000\";\n  // socket = io(ENDPOINT);\n\n  const dispatch = useDispatch();\n  const store = useSelector(state => state);\n\n  const addMessages = payload => dispatch(actions.messages(payload)); //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n\n\n  useEffect(() => {\n    socket.on('message', message => {\n      addMessages([...messages, message]);\n      setMessages([...messages, message]);\n    });\n  }); //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }; //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n\n\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Messages, {\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/strong/worck/study/AppReact/reactAppChat/client/src/components/Chat/Chat.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","io","actions","Messages","Input","Chat","message","setMessage","messages","setMessages","dispatch","store","state","addMessages","payload","socket","on","sendMessage","event","preventDefault","emit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB,C,CAGA;AAEA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC,CAFiB,CAGjB;AACA;;AAEA,QAAMa,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,KAAK,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAV,CAAzB;;AACA,QAAMC,WAAW,GAAGC,OAAO,IAAIJ,QAAQ,CAACR,OAAO,CAACM,QAAR,CAAiBM,OAAjB,CAAD,CAAvC,CARiB,CAUjB;AACA;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBV,OAAD,IAAa;AAChCO,MAAAA,WAAW,CAAC,CAAC,GAAGL,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACAG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,KAHD;AAID,GALQ,CAAT,CAZiB,CAmBjB;AACA;AACA;;AACA,QAAMW,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGb,OAAH,EAAY;AACVS,MAAAA,MAAM,CAACK,IAAP,CAAY,aAAZ,EAA2Bd,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACD;AACF,GAND,CAtBiB,CA+BjB;;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEF,OAAhB;AAAyB,IAAA,UAAU,EAAEC,UAArC;AAAiD,IAAA,WAAW,EAAEU,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF,CADF;AAQD,CAxCD;;AA0CA,eAAeZ,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport io from \"socket.io-client\";\nimport * as actions from \"../../store/actions/index\";\n\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\n\n\n// let socket;\n\n//Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  // const ENDPOINT = \"localhost:5000\";\n  // socket = io(ENDPOINT);\n\n  const dispatch = useDispatch();\n  const store = useSelector(state => state);\n  const addMessages = payload => dispatch(actions.messages(payload));\n  \n  //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n  useEffect(() => {\n    socket.on('message', (message) => {\n      addMessages([...messages, message]);\n      setMessages([...messages, message ]);\n    });\n  })\n\n  //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }\n\n  \n  //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <Messages messages={messages}/>\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}