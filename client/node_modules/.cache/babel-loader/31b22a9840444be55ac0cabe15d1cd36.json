{"ast":null,"code":"var _jsxFileName = \"D:\\\\studi\\\\reactapp\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [name, setName] = useState('');\n  const ENDPOINT = \"localhost:5000\";\n  const store = useSelector(state => state.user.email);\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    setName(store.match(/(^.+)(?=@)/)[0]);\n  }, [ENDPOINT]); //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n\n  useEffect(() => {\n    socket.on('message', message => {\n      console.log(1, message);\n      setMessages([...messages, message.text]);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [messages]); //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n\n  const sendMessage = event => {\n    event.preventDefault();\n    console.log([1]);\n\n    if (message) {\n      socket.emit('sendMessage', {\n        message,\n        name\n      }, () => setMessage(''));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Chat page\"), React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Messages, {\n    messages: messages,\n    user: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))));\n};\n\nexport default Chat;","map":{"version":3,"sources":["D:/studi/reactapp/client/src/components/Chat/Chat.jsx"],"names":["React","useState","useEffect","Messages","Input","Chat","message","setMessage","messages","setMessages","name","setName","ENDPOINT","store","useSelector","state","user","email","socket","io","match","on","console","log","text","emit","off","sendMessage","event","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAOC,KAAP,MAAkB,eAAlB;;AAKA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMW,QAAQ,GAAG,gBAAjB;AACA,QAAMC,KAAK,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArB,CAAzB;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM,GAAGC,EAAE,CAACP,QAAD,CAAX;AAEAD,IAAAA,OAAO,CAACE,KAAK,CAACO,KAAN,CAAY,YAAZ,EAA0B,CAA1B,CAAD,CAAP;AAED,GALQ,EAKN,CAACR,QAAD,CALM,CAAT,CAPiB,CAcjB;AACA;;AACAV,EAAAA,SAAS,CAAC,MAAM;AAEdgB,IAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAsBf,OAAD,IAAa;AAChCgB,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAcjB,OAAd;AACAG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAO,CAACkB,IAAtB,CAAD,CAAX;AACD,KAHD;AAKA,WAAO,MAAM;AACXN,MAAAA,MAAM,CAACO,IAAP,CAAY,YAAZ;AACAP,MAAAA,MAAM,CAACQ,GAAP;AACD,KAHD;AAID,GAXQ,EAWN,CAAClB,QAAD,CAXM,CAAT,CAhBiB,CA6BjB;AACA;AACA;;AACA,QAAMmB,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,CAAD,CAAZ;;AACA,QAAGjB,OAAH,EAAY;AACVY,MAAAA,MAAM,CAACO,IAAP,CAAY,aAAZ,EAA2B;AAACnB,QAAAA,OAAD;AAAUI,QAAAA;AAAV,OAA3B,EAA4C,MAAMH,UAAU,CAAC,EAAD,CAA5D;AACD;AACF,GAND;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEC,QAApB;AAA8B,IAAA,IAAI,EAAEE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEJ,OAAhB;AAAyB,IAAA,UAAU,EAAEC,UAArC;AAAiD,IAAA,WAAW,EAAEoB,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADA,CAFF,CADF;AAWD,CAnDD;;AAqDA,eAAetB,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Messages from './Messages/Messages';\r\n\r\nimport Input from './Input/Input';\r\n\r\n\r\n\r\n\r\nconst Chat = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [name, setName] = useState('');\r\n\r\n  const ENDPOINT = \"localhost:5000\";\r\n  const store = useSelector(state => state.user.email);\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n\r\n    setName(store.match(/(^.+)(?=@)/)[0]);\r\n\r\n  }, [ENDPOINT]);\r\n\r\n  //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\r\n  // Принимаем один аргумент message.\r\n  useEffect(() => {\r\n\r\n    socket.on('message', (message) => {\r\n      console.log(1,message);\r\n      setMessages([...messages, message.text ]);\r\n    });\r\n\r\n    return () => {\r\n      socket.emit('disconnect');\r\n      socket.off();\r\n    }\r\n  }, [messages])\r\n\r\n  //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\r\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\r\n  //А поле input делаем пустым с помощью setMessage('');\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    console.log([1])\r\n    if(message) {\r\n      socket.emit('sendMessage', {message, name}, () => setMessage(''));\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Chat page</h2>\r\n      <div className=\"outerContainer\">\r\n      <div className=\"container\">\r\n          <Messages messages={messages} user={name}/>\r\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n      </div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}