{"ast":null,"code":"var _jsxFileName = \"/Users/strong/worck/study/AppReact/reactAppChat/client/src/components/Chat/Chat.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from 'react-redux';\nimport io from \"socket.io-client\";\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\nlet socket; //Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst useChat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [name, setName] = useState('');\n  const ENDPOINT = \"localhost:5000\";\n  const store = useSelector(state => state.user.email);\n  useEffect(() => {\n    socket = io(ENDPOINT);\n\n    if (store) {\n      setName(store.match(/(^.+)(?=@)/)[0]);\n    } else {\n      return;\n    }\n  }, [ENDPOINT]); //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message.text]);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [messages]); //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', {\n        message,\n        name\n      }, () => setMessage(''));\n    }\n  }; //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n\n\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Messages, {\n    messages: messages,\n    user: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n};\n\nexport default useChat;","map":{"version":3,"sources":["/Users/strong/worck/study/AppReact/reactAppChat/client/src/components/Chat/Chat.jsx"],"names":["React","useState","useEffect","useSelector","io","Messages","Input","socket","useChat","message","setMessage","messages","setMessages","name","setName","ENDPOINT","store","state","user","email","match","on","text","emit","off","sendMessage","event","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAGA,IAAIC,MAAJ,C,CAEA;AACA;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMc,QAAQ,GAAG,gBAAjB;AACA,QAAMC,KAAK,GAAGb,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArB,CAAzB;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,GAAGH,EAAE,CAACW,QAAD,CAAX;;AAEA,QAAGC,KAAH,EAAU;AACRF,MAAAA,OAAO,CAACE,KAAK,CAACI,KAAN,CAAY,YAAZ,EAA0B,CAA1B,CAAD,CAAP;AACD,KAFD,MAEO;AACL;AACD;AAEF,GATQ,EASN,CAACL,QAAD,CATM,CAAT,CAPoB,CAkBpB;AACA;;AACAb,EAAAA,SAAS,CAAC,MAAM;AAEdK,IAAAA,MAAM,CAACc,EAAP,CAAU,SAAV,EAAsBZ,OAAD,IAAa;AAChCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAO,CAACa,IAAtB,CAAD,CAAX;AACD,KAFD;AAIA,WAAO,MAAM;AACXf,MAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AACAhB,MAAAA,MAAM,CAACiB,GAAP;AACD,KAHD;AAID,GAVQ,EAUN,CAACb,QAAD,CAVM,CAAT,CApBoB,CAgCpB;AACA;AACA;;AACA,QAAMc,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAGlB,OAAH,EAAY;AACVF,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2B;AAACd,QAAAA,OAAD;AAAUI,QAAAA;AAAV,OAA3B,EAA4C,MAAMH,UAAU,CAAC,EAAD,CAA5D;AACD;AACF,GALD,CAnCoB,CA0CpB;;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEC,QAApB;AAA8B,IAAA,IAAI,EAAEE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEJ,OAAhB;AAAyB,IAAA,UAAU,EAAEC,UAArC;AAAiD,IAAA,WAAW,EAAEe,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF,CADF;AAQD,CAnDD;;AAqDA,eAAejB,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from 'react-redux';\nimport io from \"socket.io-client\";\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\n\n\nlet socket;\n\n//Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst useChat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [name, setName] = useState('');\n\n  const ENDPOINT = \"localhost:5000\";\n  const store = useSelector(state => state.user.email);\n  useEffect(() => {\n    socket = io(ENDPOINT);\n\n    if(store) {\n      setName(store.match(/(^.+)(?=@)/)[0]);\n    } else {\n      return;\n    }\n\n  }, [ENDPOINT]);\n\n  //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n  useEffect(() => {\n\n    socket.on('message', (message) => {\n      setMessages([...messages, message.text ]);\n    });\n\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    }\n  }, [messages])\n\n  //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n  const sendMessage = (event) => {\n    event.preventDefault();\n    if(message) {\n      socket.emit('sendMessage', {message, name}, () => setMessage(''));\n    }\n  }\n\n  //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <Messages messages={messages} user={name}/>\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n    </div>\n  );\n}\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}