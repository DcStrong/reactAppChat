{"ast":null,"code":"var _jsxFileName = \"/Users/strong/worck/study/AppReact/reactAppChat/client/src/components/Chat/Chat.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelect, useDispatch } from 'react-redux';\nimport io from \"socket.io-client\";\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\nlet socket; //Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = \"localhost:5000\";\n  socket = io(ENDPOINT);\n  const dispatch = useDispatch();\n  const store = useSelect(state => state);\n\n  const addMessages = payload => dispatch(actions.messages(payload)); //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }); //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      addMessages(message);\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }; //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n\n\n  return React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Messages, {\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/strong/worck/study/AppReact/reactAppChat/client/src/components/Chat/Chat.jsx"],"names":["React","useState","useEffect","useSelect","useDispatch","io","Messages","Input","socket","Chat","message","setMessage","messages","setMessages","ENDPOINT","dispatch","store","state","addMessages","payload","actions","on","sendMessage","event","preventDefault","emit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,aAAvC;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAGA,IAAIC,MAAJ,C,CAEA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMa,QAAQ,GAAG,gBAAjB;AACAN,EAAAA,MAAM,GAAGH,EAAE,CAACS,QAAD,CAAX;AAEA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,KAAK,GAAGb,SAAS,CAACc,KAAK,IAAIA,KAAV,CAAvB;;AACA,QAAMC,WAAW,GAAGC,OAAO,IAAIJ,QAAQ,CAACK,OAAO,CAACR,QAAR,CAAiBO,OAAjB,CAAD,CAAvC,CARiB,CAUjB;AACA;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,MAAM,CAACa,EAAP,CAAU,SAAV,EAAsBX,OAAD,IAAa;AAChCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,KAFD;AAGD,GAJQ,CAAT,CAZiB,CAkBjB;AACA;AACA;;AACA,QAAMY,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGd,OAAH,EAAY;AACVQ,MAAAA,WAAW,CAACR,OAAD,CAAX;AACAF,MAAAA,MAAM,CAACiB,IAAP,CAAY,aAAZ,EAA2Bf,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACD;AACF,GAPD,CArBiB,CA+BjB;;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEF,OAAhB;AAAyB,IAAA,UAAU,EAAEC,UAArC;AAAiD,IAAA,WAAW,EAAEW,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF,CADF;AAQD,CAxCD;;AA0CA,eAAeb,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelect, useDispatch } from 'react-redux';\nimport io from \"socket.io-client\";\n\nimport Messages from './Messages/Messages';\nimport Input from './Input/Input';\n\n\nlet socket;\n\n//Создаем два массива. Первый у нас устанавливает сообщение которое вводили в поле ввода.\n//Второй принимает от сокета полеченое сообщение и создает из них массив всех сообщений\n\nconst Chat = () => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = \"localhost:5000\";\n  socket = io(ENDPOINT);\n\n  const dispatch = useDispatch();\n  const store = useSelect(state => state);\n  const addMessages = payload => dispatch(actions.messages(payload));\n  \n  //Получаем текущее состояние элемента, каждый раз когда рендериться приложение. Принимаем событие с сервера\n  // Принимаем один аргумент message.\n  useEffect(() => {\n    socket.on('message', (message) => {\n      setMessages([...messages, message ]);\n    });\n  })\n\n  //Функция срабатывает в компоненте Input на кнопке отправки, в качестве аргумента принимает event,\n  //стандартный слушатель события. Проверяем message, если не пусто, отправляем событие socket.emit на сервер\n  //А поле input делаем пустым с помощью setMessage('');\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n      addMessages(message);\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }\n\n  \n  //В компонент messages мы передаем массив из полученых сообщений и выводим на страницу\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <Messages messages={messages}/>\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}